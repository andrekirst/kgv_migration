version: '3.9'

services:
  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:16-alpine
    container_name: kgv-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kgv_production}
      POSTGRES_USER: ${POSTGRES_USER:-kgv_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=de_DE.utf8"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./backup:/backup:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kgv_user} -d ${POSTGRES_DB:-kgv_production}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - kgv-network-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: kgv-redis-prod
    restart: always
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - kgv-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # .NET API - Production Build
  api:
    build:
      context: ../../src/KGV.Api
      dockerfile: Dockerfile
      target: production
    container_name: kgv-api-prod
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:5000
      ConnectionStrings__Database: "Host=postgres;Database=${POSTGRES_DB:-kgv_production};Username=${POSTGRES_USER:-kgv_user};Password=${POSTGRES_PASSWORD}"
      ConnectionStrings__Redis: "redis:6379,password=${REDIS_PASSWORD}"
      JWT__Secret: ${JWT_SECRET}
      JWT__Issuer: ${JWT_ISSUER:-kgv-api}
      JWT__Audience: ${JWT_AUDIENCE:-kgv-web}
      Logging__LogLevel__Default: "Warning"
      Logging__LogLevel__Microsoft: "Warning"
      Logging__LogLevel__Microsoft.Hosting.Lifetime: "Information"
      Logging__Console__IncludeScopes: "false"
    volumes:
      - api_logs_prod:/app/logs
    expose:
      - "5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - kgv-network-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Next.js Web Application - Production Build
  web:
    build:
      context: ../../src/KGV.Web
      dockerfile: Dockerfile
      target: production
    container_name: kgv-web-prod
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://localhost/api}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-https://localhost}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    expose:
      - "3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - kgv-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Nginx Reverse Proxy - Production Configuration
  nginx:
    image: nginx:1.25-alpine
    container_name: kgv-nginx-prod
    restart: always
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - kgv-network-prod
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: kgv-prometheus-prod
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - kgv-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring: Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: kgv-grafana-prod
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3001}
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - kgv-network-prod
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log Aggregation: Seq
  seq:
    image: datalust/seq:latest
    container_name: kgv-seq-prod
    restart: always
    environment:
      ACCEPT_EULA: 'Y'
      SEQ_FIRSTRUN_ADMINPASSWORD: ${SEQ_ADMIN_PASSWORD}
      SEQ_CACHE_SYSTEMRAMTARGET: 0.25
    volumes:
      - seq_data_prod:/data
    ports:
      - "${SEQ_WEB_PORT:-5341}:80"
      - "${SEQ_INGESTION_PORT:-5342}:5341"
    networks:
      - kgv-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  kgv-network-prod:
    driver: bridge
    name: kgv-network-prod
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data_prod:
    name: kgv-postgres-data-prod
    driver: local
  redis_data_prod:
    name: kgv-redis-data-prod
    driver: local
  api_logs_prod:
    name: kgv-api-logs-prod
    driver: local
  nginx_logs_prod:
    name: kgv-nginx-logs-prod
    driver: local
  prometheus_data_prod:
    name: kgv-prometheus-data-prod
    driver: local
  grafana_data_prod:
    name: kgv-grafana-data-prod
    driver: local
  seq_data_prod:
    name: kgv-seq-data-prod
    driver: local