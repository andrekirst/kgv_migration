# Docker Security Configuration Override
# Use with: docker-compose -f docker-compose.yml -f docker-security.yml up

version: '3.9'

services:
  postgres:
    # Security enhancements for PostgreSQL
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    read_only: false  # PostgreSQL needs write access to data directory
    tmpfs:
      - /tmp
      - /run
    environment:
      # Enable SSL/TLS for connections
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=de_DE.utf8 --auth-host=scram-sha-256 --auth-local=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256

  redis:
    # Security enhancements for Redis
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    read_only: false  # Redis needs write access for persistence
    tmpfs:
      - /tmp
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./redis/redis-acl.conf:/usr/local/etc/redis/redis-acl.conf:ro
      - redis_data:/data
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:?ERROR}

  api:
    # Security enhancements for .NET API
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    user: "1001:1001"
    environment:
      # Additional security environment variables
      ASPNETCORE_FORWARDEDHEADERS_ENABLED: true
      ASPNETCORE_HTTPS_PORT: 443
      ASPNETCORE_ENFORCEHTTPS: true

  web:
    # Security enhancements for Next.js
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    user: "1001:1001"

  nginx:
    # Security enhancements for Nginx
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/security-headers.conf:/etc/nginx/security-headers.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx

  # Additional security services
  
  # Fail2ban for intrusion prevention
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: kgv-fail2ban
    restart: always
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./fail2ban:/data
      - nginx_logs:/var/log/nginx:ro
      - /var/log/auth.log:/var/log/auth.log:ro
    environment:
      TZ: Europe/Berlin
      F2B_LOG_LEVEL: INFO
      F2B_DB_PURGE_AGE: 30d
    networks:
      - kgv-network
    profiles:
      - security

  # ClamAV for malware scanning
  clamav:
    image: clamav/clamav:stable
    container_name: kgv-clamav
    restart: always
    volumes:
      - clamav_data:/var/lib/clamav
      - ./uploads:/scan:ro
    networks:
      - kgv-network
    profiles:
      - security
    healthcheck:
      test: ["CMD", "clamdscan", "--ping"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Vault for secrets management (optional)
  vault:
    image: vault:latest
    container_name: kgv-vault
    restart: always
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - ./vault:/vault/config:ro
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    networks:
      - kgv-network
    profiles:
      - security
    command: server

networks:
  kgv-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: kgv0
      com.docker.network.bridge.enable_icc: "false"  # Disable inter-container communication
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1

volumes:
  redis_data:
    driver: local
    driver_opts:
      o: "uid=1001,gid=1001"
  vault_data:
    driver: local
    driver_opts:
      type: none
      o: bind,uid=1001,gid=1001
      device: ./vault/data
  clamav_data:
    driver: local