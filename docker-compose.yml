version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: kgv-postgres
    environment:
      POSTGRES_DB: kgv_db
      POSTGRES_USER: kgv_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kgv_secure_password_2024}
      POSTGRES_INITDB_ARGS: "--locale=de_DE.UTF-8 --encoding=UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql/01_schema_core.sql:/docker-entrypoint-initdb.d/01_schema_core.sql:ro
      - ./postgresql/02_schema_sequences.sql:/docker-entrypoint-initdb.d/02_schema_sequences.sql:ro
      - ./postgresql/03_performance_optimizations.sql:/docker-entrypoint-initdb.d/03_performance_optimizations.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kgv_user -d kgv_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - kgv-network
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: kgv-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - kgv-network
    security_opt:
      - no-new-privileges:true

  # KGV API Application
  kgv-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: kgv-api
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:8080
      # - ASPNETCORE_HTTPS_PORT=8445  # Disabled for HTTP-only testing
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=kgv_db;Username=kgv_user;Password=${POSTGRES_PASSWORD:-kgv_secure_password_2024};Include Error Detail=true;
      - ConnectionStrings__Redis=redis:6379,password=${REDIS_PASSWORD:-redis_secure_password_2024}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY:-your-super-secret-jwt-key-that-should-be-at-least-32-chars-long}
      - JwtSettings__Issuer=KGV.API
      - JwtSettings__Audience=KGV.Client
      - JwtSettings__ExpiryInMinutes=60
      - Serilog__MinimumLevel__Default=Information
      - Serilog__MinimumLevel__Override__Microsoft=Warning
      - Serilog__MinimumLevel__Override__System=Warning
      - TZ=Europe/Berlin
    ports:
      - "8080:8080"
    volumes:
      - api_logs:/app/logs
      - ${ASPNETCORE_HTTPS_CERT_PATH:-./certs}:/app/certs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - kgv-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/temp

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: kgv-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - kgv-api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - kgv-network
    security_opt:
      - no-new-privileges:true

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: kgv-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_secure_password_2024}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - kgv-network
    security_opt:
      - no-new-privileges:true

  # KGV Frontend (Next.js)
  kgv-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: kgv-frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://kgv-api:8080/api
      - PORT=3001
    ports:
      - "3001:3001"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - kgv-api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - kgv-network
    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: kgv-nginx
    ports:
      - "8090:80"
      - "8446:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - kgv-api
      - kgv-frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - kgv-network
    security_opt:
      - no-new-privileges:true

networks:
  kgv-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local