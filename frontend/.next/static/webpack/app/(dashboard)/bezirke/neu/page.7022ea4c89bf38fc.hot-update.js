"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(dashboard)/bezirke/neu/page",{

/***/ "(app-pages-browser)/./src/lib/validation/schemas.ts":
/*!***************************************!*\
  !*** ./src/lib/validation/schemas.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   antraegeFilterSchema: () => (/* binding */ antraegeFilterSchema),\n/* harmony export */   antragCreateSchema: () => (/* binding */ antragCreateSchema),\n/* harmony export */   antragUpdateSchema: () => (/* binding */ antragUpdateSchema),\n/* harmony export */   bezirkCreateSchema: () => (/* binding */ bezirkCreateSchema),\n/* harmony export */   bezirkSearchSchema: () => (/* binding */ bezirkSearchSchema),\n/* harmony export */   bezirkUpdateSchema: () => (/* binding */ bezirkUpdateSchema),\n/* harmony export */   bezirkeFilterSchema: () => (/* binding */ bezirkeFilterSchema),\n/* harmony export */   bulkParzelleOperationSchema: () => (/* binding */ bulkParzelleOperationSchema),\n/* harmony export */   exportRequestSchema: () => (/* binding */ exportRequestSchema),\n/* harmony export */   generalSearchSchema: () => (/* binding */ generalSearchSchema),\n/* harmony export */   parzelleCreateSchema: () => (/* binding */ parzelleCreateSchema),\n/* harmony export */   parzelleUpdateSchema: () => (/* binding */ parzelleUpdateSchema),\n/* harmony export */   parzellenAssignmentSchema: () => (/* binding */ parzellenAssignmentSchema),\n/* harmony export */   parzellenFilterSchema: () => (/* binding */ parzellenFilterSchema),\n/* harmony export */   verlaufCreateSchema: () => (/* binding */ verlaufCreateSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(app-pages-browser)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _types_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types/api */ \"(app-pages-browser)/./src/types/api.ts\");\n/**\n * Zod Schema Definitions für KGV Management System\n * \n * Comprehensive validation schemas with German error messages\n * for all entities in the KGV system.\n */ \n\n// =============================================================================\n// UTILITY SCHEMAS\n// =============================================================================\n/**\n * Deutsche Telefonnummer Validation\n * Unterstützt: +49 123 456789, 0123 456789, 0123/456789, etc.\n */ const telefonnummerSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>{\n    if (!val) return true;\n    const phoneRegex = /^(\\+49|0)[1-9][0-9\\s\\-\\/]{7,14}$/;\n    return phoneRegex.test(val.replace(/\\s/g, ''));\n}, {\n    message: 'Bitte geben Sie eine gültige deutsche Telefonnummer ein'\n});\n/**\n * Deutsche PLZ Validation\n */ const plzSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>{\n    if (!val) return true;\n    return /^[0-9]{5}$/.test(val);\n}, {\n    message: 'PLZ muss aus 5 Ziffern bestehen'\n});\n/**\n * Email Schema mit deutschen Fehlermeldungen\n */ const emailSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>{\n    if (!val) return true;\n    return zod__WEBPACK_IMPORTED_MODULE_1__.string().email().safeParse(val).success;\n}, {\n    message: 'Bitte geben Sie eine gültige E-Mail-Adresse ein'\n});\n/**\n * Adresse Schema\n */ const adresseSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    strasse: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.trim().length >= 2, {\n        message: 'Straße muss mindestens 2 Zeichen haben'\n    }),\n    hausnummer: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || /^[0-9]+[a-zA-Z]?$/.test(val), {\n        message: 'Ungültige Hausnummer'\n    }),\n    plz: plzSchema,\n    ort: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.trim().length >= 2, {\n        message: 'Ort muss mindestens 2 Zeichen haben'\n    })\n});\n/**\n * Name Validation (für Personen)\n */ const nameSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Dieses Feld ist erforderlich').min(2, 'Name muss mindestens 2 Zeichen haben').max(50, 'Name darf maximal 50 Zeichen haben').regex(/^[a-zA-ZäöüÄÖÜß\\s\\-']+$/, 'Name darf nur Buchstaben, Leerzeichen, Bindestriche und Apostrophe enthalten');\n/**\n * Optionaler Name (für zweite Person bei Anträgen)\n */ const optionalNameSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>{\n    if (!val) return true;\n    return nameSchema.safeParse(val).success;\n}, {\n    message: 'Name muss mindestens 2 Zeichen haben und darf nur Buchstaben enthalten'\n});\n/**\n * Datum Schema (ISO String oder Date)\n */ const datumSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>{\n    if (!val) return true;\n    return !isNaN(Date.parse(val));\n}, {\n    message: 'Ungültiges Datum'\n});\n// =============================================================================\n// BEZIRK SCHEMAS\n// =============================================================================\n/**\n * Bezirk Erstellung Schema\n */ const bezirkCreateSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Bezirksname ist erforderlich').min(2, 'Bezirksname muss mindestens 2 Zeichen haben').max(10, 'Bezirksname darf maximal 10 Zeichen haben').regex(/^[a-zA-ZäöüÄÖÜß0-9\\s\\-().]+$/, 'Bezirksname darf nur Buchstaben, Zahlen, Leerzeichen und Sonderzeichen (-.()) enthalten'),\n    beschreibung: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 500, {\n        message: 'Beschreibung darf maximal 500 Zeichen haben'\n    }),\n    bezirksleiter: optionalNameSchema,\n    telefon: telefonnummerSchema,\n    email: emailSchema,\n    adresse: adresseSchema.optional()\n});\n/**\n * Bezirk Update Schema\n */ const bezirkUpdateSchema = bezirkCreateSchema.partial().extend({\n    aktiv: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional()\n});\n// =============================================================================\n// PARZELLE SCHEMAS\n// =============================================================================\n/**\n * Parzellen Nummer Schema\n */ const parzellenNummerSchema = zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Parzellennummer ist erforderlich').max(20, 'Parzellennummer darf maximal 20 Zeichen haben').regex(/^[a-zA-Z0-9\\-\\/]+$/, 'Parzellennummer darf nur Buchstaben, Zahlen, Bindestriche und Schrägstriche enthalten');\n/**\n * Parzelle Erstellung Schema\n */ const parzelleCreateSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    nummer: parzellenNummerSchema,\n    bezirkId: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive('Bitte wählen Sie einen gültigen Bezirk'),\n    groesse: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive('Größe muss eine positive Zahl sein').min(1, 'Mindestgröße ist 1 m²').max(10000, 'Maximalgröße ist 10.000 m²'),\n    beschreibung: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 1000, {\n        message: 'Beschreibung darf maximal 1000 Zeichen haben'\n    }),\n    ausstattung: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).default([]).refine((arr)=>arr.every((item)=>item.length <= 100), {\n        message: 'Jede Ausstattung darf maximal 100 Zeichen haben'\n    }),\n    monatlichePacht: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative('Pacht darf nicht negativ sein').max(10000, 'Maximale Pacht ist 10.000 €'),\n    kaution: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative('Kaution darf nicht negativ sein').max(50000, 'Maximale Kaution ist 50.000 €').optional(),\n    kuendigungsfrist: zod__WEBPACK_IMPORTED_MODULE_1__.number().int('Kündigungsfrist muss eine ganze Zahl sein').min(1, 'Mindeste Kündigungsfrist ist 1 Monat').max(24, 'Maximale Kündigungsfrist ist 24 Monate'),\n    adresse: adresseSchema.optional(),\n    bemerkungen: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 1000, {\n        message: 'Bemerkungen dürfen maximal 1000 Zeichen haben'\n    })\n});\n/**\n * Parzelle Update Schema\n */ const parzelleUpdateSchema = parzelleCreateSchema.partial().extend({\n    status: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_types_api__WEBPACK_IMPORTED_MODULE_0__.ParzellenStatus).optional(),\n    aktiv: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional()\n});\n/**\n * Parzellen Assignment Schema\n */ const parzellenAssignmentSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    parzelleId: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive(),\n    mieterId: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive(),\n    mieterVorname: nameSchema,\n    mieterNachname: nameSchema,\n    mieterEmail: emailSchema,\n    mieterTelefon: telefonnummerSchema,\n    mietbeginn: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Mietbeginn ist erforderlich').refine((val)=>!isNaN(Date.parse(val)), {\n        message: 'Ungültiges Datum für Mietbeginn'\n    }),\n    mietende: datumSchema,\n    monatlichePacht: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative('Pacht darf nicht negativ sein'),\n    kaution: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative('Kaution darf nicht negativ sein').optional(),\n    bemerkungen: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 1000, {\n        message: 'Bemerkungen dürfen maximal 1000 Zeichen haben'\n    })\n});\n// =============================================================================\n// ANTRAG SCHEMAS\n// =============================================================================\n/**\n * Antrag Erstellung Schema\n */ const antragCreateSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    // Erste Person (erforderlich)\n    anrede: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_types_api__WEBPACK_IMPORTED_MODULE_0__.Anrede).optional(),\n    titel: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 20, {\n        message: 'Titel darf maximal 20 Zeichen haben'\n    }),\n    vorname: nameSchema,\n    nachname: nameSchema,\n    // Zweite Person (optional)\n    anrede2: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_types_api__WEBPACK_IMPORTED_MODULE_0__.Anrede).optional(),\n    titel2: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 20, {\n        message: 'Titel darf maximal 20 Zeichen haben'\n    }),\n    vorname2: optionalNameSchema,\n    nachname2: optionalNameSchema,\n    // Kontaktdaten\n    briefanrede: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 100, {\n        message: 'Briefanrede darf maximal 100 Zeichen haben'\n    }),\n    strasse: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.trim().length >= 3, {\n        message: 'Straße muss mindestens 3 Zeichen haben'\n    }),\n    plz: plzSchema,\n    ort: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.trim().length >= 2, {\n        message: 'Ort muss mindestens 2 Zeichen haben'\n    }),\n    // Telefonnummern\n    telefon: telefonnummerSchema,\n    mobilTelefon: telefonnummerSchema,\n    geschTelefon: telefonnummerSchema,\n    mobilTelefon2: telefonnummerSchema,\n    // E-Mail\n    eMail: emailSchema,\n    // Antrags-spezifische Felder\n    bewerbungsdatum: datumSchema,\n    wunsch: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 500, {\n        message: 'Wunsch darf maximal 500 Zeichen haben'\n    }),\n    vermerk: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 1000, {\n        message: 'Vermerk darf maximal 1000 Zeichen haben'\n    }),\n    // Geburtsdaten\n    geburtstag: datumSchema,\n    geburtstag2: datumSchema\n});\n/**\n * Antrag Update Schema\n */ const antragUpdateSchema = antragCreateSchema.partial().extend({\n    id: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'ID ist erforderlich'),\n    status: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_types_api__WEBPACK_IMPORTED_MODULE_0__.AntragStatus).optional(),\n    aktuellesAngebot: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 500, {\n        message: 'Aktuelles Angebot darf maximal 500 Zeichen haben'\n    }),\n    loeschdatum: datumSchema,\n    bestaetigungsdatum: datumSchema\n});\n/**\n * Verlauf Erstellung Schema\n */ const verlaufCreateSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    antragId: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Antrag-ID ist erforderlich'),\n    art: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_types_api__WEBPACK_IMPORTED_MODULE_0__.VerlaufArt),\n    datum: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Datum ist erforderlich').refine((val)=>!isNaN(Date.parse(val)), {\n        message: 'Ungültiges Datum'\n    }),\n    gemarkung: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 100, {\n        message: 'Gemarkung darf maximal 100 Zeichen haben'\n    }),\n    flur: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 50, {\n        message: 'Flur darf maximal 50 Zeichen haben'\n    }),\n    parzelle: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 50, {\n        message: 'Parzelle darf maximal 50 Zeichen haben'\n    }),\n    groesse: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 50, {\n        message: 'Größe darf maximal 50 Zeichen haben'\n    }),\n    sachbearbeiter: optionalNameSchema,\n    hinweis: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 500, {\n        message: 'Hinweis darf maximal 500 Zeichen haben'\n    }),\n    kommentar: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 1000, {\n        message: 'Kommentar darf maximal 1000 Zeichen haben'\n    })\n});\n// =============================================================================\n// FILTER SCHEMAS\n// =============================================================================\n/**\n * Bezirke Filter Schema\n */ const bezirkeFilterSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    search: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n    aktiv: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional(),\n    hasApplications: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional(),\n    hasCadastralAreas: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional(),\n    page: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().optional(),\n    limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().max(1000).optional(),\n    sortBy: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'name',\n        'erstelltAm',\n        'gesamtParzellen',\n        'aktiveParzellen',\n        'freieParzellen'\n    ]).optional(),\n    sortOrder: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'asc',\n        'desc'\n    ]).optional()\n});\n/**\n * Parzellen Filter Schema\n */ const parzellenFilterSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    search: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n    bezirkId: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().optional(),\n    status: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_types_api__WEBPACK_IMPORTED_MODULE_0__.ParzellenStatus)).optional(),\n    aktiv: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional(),\n    groesseMin: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative().optional(),\n    groesseMax: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().optional(),\n    pachtMin: zod__WEBPACK_IMPORTED_MODULE_1__.number().nonnegative().optional(),\n    pachtMax: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().optional(),\n    page: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().optional(),\n    limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().max(1000).optional(),\n    sortBy: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'nummer',\n        'groesse',\n        'monatlichePacht',\n        'erstelltAm'\n    ]).optional(),\n    sortOrder: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'asc',\n        'desc'\n    ]).optional()\n}).refine((data)=>{\n    if (data.groesseMin && data.groesseMax) {\n        return data.groesseMin <= data.groesseMax;\n    }\n    return true;\n}, {\n    message: 'Mindestgröße muss kleiner oder gleich der Maximalgröße sein',\n    path: [\n        'groesseMax'\n    ]\n}).refine((data)=>{\n    if (data.pachtMin && data.pachtMax) {\n        return data.pachtMin <= data.pachtMax;\n    }\n    return true;\n}, {\n    message: 'Mindestpacht muss kleiner oder gleich der Maximalpacht sein',\n    path: [\n        'pachtMax'\n    ]\n});\n/**\n * Anträge Filter Schema\n */ const antraegeFilterSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    search: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n    status: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_types_api__WEBPACK_IMPORTED_MODULE_0__.AntragStatus)).optional(),\n    bezirk: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).optional(),\n    aktiv: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional(),\n    bewerbungsdatumVon: datumSchema,\n    bewerbungsdatumBis: datumSchema,\n    ort: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).optional(),\n    page: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().optional(),\n    limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().max(1000).optional(),\n    sortBy: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n    sortOrder: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'asc',\n        'desc'\n    ]).optional()\n}).refine((data)=>{\n    if (data.bewerbungsdatumVon && data.bewerbungsdatumBis) {\n        const von = new Date(data.bewerbungsdatumVon);\n        const bis = new Date(data.bewerbungsdatumBis);\n        return von <= bis;\n    }\n    return true;\n}, {\n    message: 'Von-Datum muss vor oder gleich dem Bis-Datum sein',\n    path: [\n        'bewerbungsdatumBis'\n    ]\n});\n// =============================================================================\n// SEARCH SCHEMAS\n// =============================================================================\n/**\n * Bezirk Suche Schema\n */ const bezirkSearchSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    query: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Suchbegriff ist erforderlich').min(2, 'Suchbegriff muss mindestens 2 Zeichen haben'),\n    limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().max(100).optional().default(20),\n    activeOnly: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional().default(true),\n    fuzzyMatch: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional().default(false)\n});\n/**\n * Allgemeine Suche Schema\n */ const generalSearchSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    query: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1, 'Suchbegriff ist erforderlich').min(2, 'Suchbegriff muss mindestens 2 Zeichen haben').max(100, 'Suchbegriff darf maximal 100 Zeichen haben'),\n    type: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'bezirke',\n        'parzellen',\n        'antraege',\n        'all'\n    ]).optional().default('all'),\n    limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().positive().max(100).optional().default(20)\n});\n// =============================================================================\n// BULK OPERATION SCHEMAS\n// =============================================================================\n/**\n * Bulk Parzelle Operation Schema\n */ const bulkParzelleOperationSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    parzelleIds: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.number().positive()).min(1, 'Mindestens eine Parzelle muss ausgewählt werden').max(100, 'Maximal 100 Parzellen können gleichzeitig bearbeitet werden'),\n    operation: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'activate',\n        'deactivate',\n        'delete',\n        'changeStatus'\n    ]),\n    newStatus: zod__WEBPACK_IMPORTED_MODULE_1__.nativeEnum(_types_api__WEBPACK_IMPORTED_MODULE_0__.ParzellenStatus).optional(),\n    reason: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().refine((val)=>!val || val.length <= 500, {\n        message: 'Grund darf maximal 500 Zeichen haben'\n    })\n}).refine((data)=>{\n    if (data.operation === 'changeStatus') {\n        return data.newStatus !== undefined;\n    }\n    return true;\n}, {\n    message: 'Neuer Status ist erforderlich bei Status-Änderung',\n    path: [\n        'newStatus'\n    ]\n});\n// =============================================================================\n// EXPORT SCHEMAS\n// =============================================================================\n/**\n * Export Request Schema\n */ const exportRequestSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    format: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'excel',\n        'pdf',\n        'csv'\n    ]),\n    filter: zod__WEBPACK_IMPORTED_MODULE_1__.union([\n        bezirkeFilterSchema,\n        parzellenFilterSchema,\n        antraegeFilterSchema\n    ]).optional(),\n    includeHistory: zod__WEBPACK_IMPORTED_MODULE_1__.boolean().optional().default(false),\n    dateRange: zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        from: zod__WEBPACK_IMPORTED_MODULE_1__.string().refine((val)=>!isNaN(Date.parse(val)), {\n            message: 'Ungültiges Von-Datum'\n        }),\n        to: zod__WEBPACK_IMPORTED_MODULE_1__.string().refine((val)=>!isNaN(Date.parse(val)), {\n            message: 'Ungültiges Bis-Datum'\n        })\n    }).optional().refine((data)=>{\n        if (data && data.from && data.to) {\n            return new Date(data.from) <= new Date(data.to);\n        }\n        return true;\n    }, {\n        message: 'Von-Datum muss vor oder gleich dem Bis-Datum sein'\n    })\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/validation/schemas.ts\n"));

/***/ })

});